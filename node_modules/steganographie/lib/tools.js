/**
 * Convertion function, from a base to another
 *
 * @param int/string initial
 * @return int/string converted
 */

var str2bin = (string) => {
  return string.split('').map(function(char) {
    return padStart(char.charCodeAt(0).toString(2), 8, '0');
  }).join('');
}

var bin2str = (binary) => {
  return binary.match(/.{1,8}/g).map(function(byte) {
    return String.fromCharCode(bin2int(byte));
  }).join('');
}

var int2bin = (integer) => {
  if(typeof(integer) !== 'number') return NaN;
  return integer.toString(2);
}

var bin2int = (binary) => {
  return parseInt(parseInt(binary, 2).toString(10));
}

/**
 * Complete begining of the string untile specified size
 *
 * @param int string
 * @return string
 */
var padStart = (initial, count, str) => {
  if(count < initial.length) return initial;
  return str.repeat(count - initial.length).substr(0,count) + initial;
};

/*************************************
* EXPORT
*************************************/

module.exports = {
  str2bin,
  bin2str,
  int2bin,
  bin2int,
  padStart
};