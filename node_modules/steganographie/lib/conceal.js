/*************************************
* DEPENDENCIES
*************************************/

var jimp = require('jimp');
var tools = require('./tools');

/*************************************
* CONSTANTS
*************************************/

const {
  MAX_BITS,
  METHOD
} = require('./constants');

/*************************************
* FUNCTION
*************************************/

/**
 * Parameters checking function
 *
 * @param object parameters
 * @return string
 */
var check = (parameters) => {
  if(parameters.input == undefined) return 'input undefined';
  if(parameters.output == undefined) return 'output undefined';
  if(parameters.text == undefined) return 'text undefined';
  if(parameters.method == undefined || !METHOD.includes(parameters.method)) return 'method undefined or incorrect';
  return null;
}

/**
 * Store of the picture
 *
 * @param Jimp picture
 * @param string text
 * @param string method
 */
var hide = (picture, text, method, callback) => {
  // Simple method
  if(method == 'simple') {
    // Verifications
    if(picture.bitmap.width * picture.bitmap.height < text.length) {
      return callback(true, 'picture to small to store the message');
    }
    // Store the information
    for(let i = 0; i < text.length; ++i) {
      let x = i % picture.bitmap.width;
      let y = Math.trunc(i / picture.bitmap.height);
      let idx = picture.getPixelIndex(x, y)
      let color = picture.bitmap.data[idx];
      // Change pixel value
      picture.bitmap.data[idx] = color - (color % 2) + parseInt(text[i]);
    }
    // Send result
    callback(null, picture);
  } else {
    callback(true, 'unknown method');
  }
}

/*************************************
* PRINCIPAL
*************************************/

var conceal = (parameters, callback) => {
  // Verify parameters
  let verification = check(parameters);
  if(verification != null) {
    return callback(true, 'error parameters: ' + verification);
  }
  // Extracting picture
  jimp.read(parameters.input).then(function(picture) {
    // Binary convertion
    let binaryText = tools.str2bin(parameters.text);
    let binarySize = tools.int2bin(binaryText.length);
    // Verification
    if(binarySize.length > MAX_BITS) {
      return callback(true, 'size of the binary message must be encoded on ' + MAX_BITS + ' bits');
    } else {
      binarySize = tools.padStart(binarySize, MAX_BITS, '0');
    }
    // Computation step
    hide(picture, binarySize + binaryText, parameters.method, (err, res) => {
      if(err) {
        return callback(true, res);
      }
      // Write computed picture at path specified
      res.write(parameters.output, (err, res) => {
        if(err) {
          return callback(true, err);
        }
        callback(null, 'new picture with the text concealed generated');
      });
    });
  }).catch(function (err) {
    return callback(true, err.message);
  });
}

/*************************************
* EXPORT
*************************************/

module.exports = conceal;
