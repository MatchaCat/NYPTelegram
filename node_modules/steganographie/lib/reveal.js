/*************************************
* DEPENDENCIES
*************************************/

var jimp = require('jimp');
var tools = require('./tools');

/*************************************
* CONSTANTS
*************************************/

const {
  MAX_BITS,
  BYTE,
  METHOD
} = require('./constants');

/*************************************
* FUNCTION
*************************************/

/**
 * Parameters checking function
 *
 * @param object parameters
 * @return string
 */
var check = (parameters) => {
  if(parameters.input == undefined) return 'input undefined';
  if(parameters.method == undefined || !METHOD.includes(parameters.method)) return 'method undefined or incorrect';
  return null;
}

/**
 * Extract text from the picture
 *
 * @param Jimp picture
 * @param string method
 */
var extract = (picture, method, callback) => {
  // Simple method
  if(method == 'simple') {
    // Variables
    let limit = MAX_BITS;
    let size = '';
    let text = '';
    // Size
    for(let i = 0; i < MAX_BITS; ++i) {
      size += picture.bitmap.data[picture.getPixelIndex(i % picture.bitmap.width, Math.trunc(i / picture.bitmap.height))] % 2;
    }
    size = tools.bin2int(size);
    if((size/8) % 1 !== 1 || size > picture.bitmap.width * picture.bitmap.height) {
      return callback(true, 'There is no message concealed in this picture');
    }
    // Text
    for(let i = 0; i < size; ++i) {
      let pos = i + MAX_BITS;
      text += picture.bitmap.data[picture.getPixelIndex(pos % picture.bitmap.width, Math.trunc(pos / picture.bitmap.height))] % 2;
    }
    text = tools.bin2str(text);
    // Callback
    callback(null, text);
  } else {
    callback(true, 'unknown method');
  }
}

/*************************************
* PRINCIPAL
*************************************/

var reveal = (parameters, callback) => {
  // Verify parameters
  let verification = check(parameters);
  if(verification != null) {
    return callback(true, 'Error parameters: ' + verification);
  }
  // Extracting picture
  jimp.read(parameters.input).then(function(picture) {
    // Extraction step
    extract(picture, parameters.method, (err, res) => {
      return callback(err, res);
    });
  }).catch(function (err) {
    return callback(true, err.message);
  });
}

/*************************************
* EXPORT
*************************************/

module.exports = reveal;
